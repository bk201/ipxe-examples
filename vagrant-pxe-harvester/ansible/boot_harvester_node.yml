---
- name: create "Booting Node {{ node_number}}" message
  shell: >
    figlet "Booting Node {{ node_number }}" 2>/dev/null || echo "Booting Node {{ node_number }}"
  register: figlet_result

- name: print "Booting Node {{ node_number }}"
  debug:
    msg: "{{ figlet_result.stdout }}"

- name: set Harvester Node IP fact
  set_fact:
    harvester_node_ip: "{{ harvester_network_config['cluster'][node_number | int]['ip'] }}"

- name: set Harvester First Node IP fact
  set_fact:
    harvester_first_node_ip: "{{ harvester_network_config['cluster'][0]['ip'] }}"

- name: boot Harvester Node {{ node_number }}
  shell: >
    vagrant up harvester-node-{{ node_number }}
  register: harvester_node_boot_result

- name: wait for Harvester Node to ssh
  shell: >
    ssh -i ../ci-key rancher@{{ harvester_node_ip }} true
  register: ssh_result
  until: ssh_result.rc == 0
  retries: 40
  delay: 30

- name: wait for Harvester Node {{ harvester_node_ip }} to get ready
  uri:
    url: "https://{{ harvester_node_ip }}"
    validate_certs: no
    status_code: 200
    timeout: 120
  register: auth_modes_lookup_result
  until: auth_modes_lookup_result.status == 200
  retries: 20
  delay: 120
  when: not (harvester_network_config['cluster'][node_number | int]['etcd_only'] | bool)

- name: wait for Harvester Node ready (kubelet)
  shell: |
    ssh -i ../ci-key rancher@{{ harvester_first_node_ip }} curl http://{{ harvester_network_config['dhcp_server']['ip'] }}/harvester/wait-node.sh -o /tmp/wait-node.sh
    ssh -i ../ci-key rancher@{{ harvester_first_node_ip }} chmod +x /tmp/wait-node.sh
    ssh -i ../ci-key rancher@{{ harvester_first_node_ip }} sudo -i /tmp/wait-node.sh harvester-node-{{ node_number }} skip
